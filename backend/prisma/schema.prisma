// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String   @map("password_hash")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  bio           String?
  
  // Storage-based files (stored in our CDN/R2)
  fileDirectory String?  @map("file_directory") // Format: yyyy/mm/dd based on createdAt
  avatar        String?  // Filename only (e.g., "avatar-uuid.jpg")
  banner        String?  // Filename only (e.g., "banner-uuid.jpg")
  
  // External URLs (for users who provide their own URLs)
  avatarUrl     String?  @map("avatar_url")
  bannerUrl     String?  @map("banner_url")
  
  role          UserRole @default(USER)
  isVerified    Boolean  @default(false) @map("is_verified")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  videos         Video[]
  posts          CommunityPost[]
  comments       Comment[]
  likes          Like[]
  followers      Follow[] @relation("UserFollowers")
  following      Follow[] @relation("UserFollowing")
  reports        UserReport[] @relation("UserReports")
  reported       UserReport[] @relation("UserReported")
  blocks         UserBlock[] @relation("UserBlocks")
  blocked        UserBlock[] @relation("UserBlocked")
  chatRooms      ChatRoom[] @relation("ChatRoomCreator")
  chatMessages   ChatMessage[]
  chatRoomParticipants ChatRoomParticipant[]

  @@map("users")
}

enum VideoStatus {
  PUBLIC
  VIP
  PRIVATE
  UNLISTED

  @@map("video_status")
}

model Video {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  categoryId     String?      @map("category_id")
  title          String
  description    String?
  fileName       String?      @map("file_name")
  fileDirectory  String?      @map("file_directory")
  remotePlayUrl  String?      @map("remote_play_url")
  embedCode      String?      @map("embed_code") @db.Text
  videoUrl       String?      @map("video_url") // Deprecated, kept for backward compatibility
  thumbnailUrl   String?      @map("thumbnail_url")
  thumbnails     String[]     @default([]) // Array of generated thumbnail URLs for selection
  duration       Int?
  fileSize       BigInt?      @map("file_size")
  quality        String[]     @default([]) // Array of available qualities: ["360", "720", "1080"]
  subtitles      String[]     @default([]) // Array of subtitle languages: ["eng", "rus", "tha"]
  tags           String[]     @default([]) // Array of tags
  cost           Int          @default(0) // Cost in coins (0 = free)
  status         VideoStatus  @default(PUBLIC) // PUBLIC, VIP, PRIVATE, UNLISTED
  views          Int          @default(0)
  likes          Int          @default(0)
  comments       Int          @default(0)
  shares         Int          @default(0)
  downloads      Int          @default(0)
  isPublic       Boolean      @default(true) @map("is_public") // Deprecated, use status instead
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  @@index([categoryId])
  @@index([status])
  @@index([userId])
  @@map("videos")
}

model CommunityPost {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  title           String?
  content         String?
  type            PostType
  images          String[]
  videos          String[]
  linkUrl         String?  @map("link_url")
  linkTitle       String?  @map("link_title")
  linkDescription String?  @map("link_description")
  pollOptions     Json?    @map("poll_options")
  pollVotes       Json?    @map("poll_votes")
  tags            String[]
  category        String?
  likes           Int      @default(0)
  comments        Int      @default(0)
  shares          Int      @default(0)
  views           Int      @default(0)
  isPublic        Boolean  @default(true) @map("is_public")

  // New fields for enhanced community posts
  cost            Int      @default(0) @map("cost") // Coins required to view
  requiresVip     Boolean  @default(false) @map("requires_vip") // VIP requirement
  allowComments   Boolean  @default(true) @map("allow_comments") // Allow comments/replies
  allowCommentLinks Boolean @default(false) @map("allow_comment_links") // Allow links in comments
  isPinned        Boolean  @default(false) @map("is_pinned") // Pin this post
  isNsfw          Boolean  @default(false) @map("is_nsfw") // NSFW content
  replyRestriction ReplyRestriction @default(FOLLOWERS) @map("reply_restriction") // Who can reply

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("community_posts")
}

model Comment {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  contentId   String      @map("content_id")
  contentType ContentType @map("content_type")
  parentId    String?     @map("parent_id")
  content     String
  likes       Int         @default(0)
  isEdited    Boolean     @default(false) @map("is_edited")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  targetId    String?     @map("target_id")
  targetType  String?     @map("target_type")
  contentId   String      @map("content_id")
  contentType ContentType @map("content_type")
  type        LikeType
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId, contentType])
  @@map("likes")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model UserReport {
  id          String   @id @default(uuid())
  reporterId  String   @map("reporter_id")
  reportedId  String   @map("reported_id")
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  reporter User @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reported User @relation("UserReported", fields: [reportedId], references: [id], onDelete: Cascade)

  @@map("user_reports")
}

model UserBlock {
  id         String   @id @default(uuid())
  blockerId  String   @map("blocker_id")
  blockedId  String   @map("blocked_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  blocker User @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model ChatRoom {
  id        String   @id @default(uuid())
  name      String?
  type      ChatRoomType @default(PRIVATE)
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  creator      User                   @relation("ChatRoomCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  participants ChatRoomParticipant[]
  messages     ChatMessage[]

  @@map("chat_rooms")
}

model ChatRoomParticipant {
  id       String   @id @default(uuid())
  roomId   String   @map("room_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  lastReadAt DateTime? @map("last_read_at")

  // Relations
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("chat_room_participants")
}

model ChatMessage {
  id            String      @id @default(uuid())
  roomId        String      @map("room_id")
  userId        String      @map("user_id")
  content       String
  messageType   MessageType @default(TEXT) @map("message_type")
  fileName      String?     @map("file_name")
  fileDirectory String?     @map("file_directory")
  fileSize      Int?        @map("file_size")
  mimeType      String?     @map("mime_type")
  isEdited      Boolean     @default(false) @map("is_edited")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Enums
enum PostType {
  TEXT
  LINK
  POLL
  MEDIA

  @@map("post_type")
}

enum ContentType {
  VIDEO
  POST
  COMMENT

  @@map("content_type")
}

enum LikeType {
  LIKE
  DISLIKE

  @@map("like_type")
}

enum ChatRoomType {
  PRIVATE
  GROUP

  @@map("chat_room_type")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE

  @@map("message_type")
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED

  @@map("report_status")
}

enum ReplyRestriction {
  FOLLOWERS
  PAID_VIEWERS
  FOLLOWING
  VERIFIED_FOLLOWING
  NO_ONE

  @@map("reply_restriction")
}

model Category {
  id            String    @id @default(uuid())
  parentId      String?   @map("parent_id")
  categoryName  String    @map("category_name")
  categoryOrder Int       @default(0) @map("category_order")
  categoryDesc  String?   @map("category_desc")
  categoryThumb String?   @map("category_thumb") // Filename only (e.g., "category-uuid.jpg")
  fileDirectory String?   @map("file_directory") // Format: yyyy/mm/dd
  isDefault     Boolean   @default(false) @map("is_default")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Category[] @relation("CategoryHierarchy")
  videos        Video[]

  @@index([parentId])
  @@index([categoryOrder])
  @@map("categories")
}