MPS integration manual 
I. Checkout workflow 
1. Checkout stage 
Request URI: http://mypremium.store 
Request method: POST (application/x-www-form-urlencoded) 
Request parameters: 
op: create_invoice 
api_key: your public API key 
usd_amount: payment amount (in USD) 
ext_order_id: passthrough value 
gen_qr_code: 1 
target_currency: cryptocurrency code (3 letters) 
Response parameters: 
status: OK or ERROR 
currency_code: cryptocurrency code (3 letters) 
addr: target address 
amount: amount to send 
qr_code: generated QR code (base64) 
id: internal transaction ID 
cURL request example: 
$ curl -X POST 'http://mypremium.store' \ 
-F op=create_invoice \ 
-F api_key=dusrpykr1uq2vq800bo3f8xm9dikzpj8 \ 
-F usd_amount=20 \ 
-F ext_order_id=123456 \ 
-F gen_qr_code=1 \ 
-F target_currency=BTC$ 
cURL response example: 
{"id":1778454433,"payment_uri":"bitcoin:1JWjsJRMxZgrUHfmDDbZSDm1964UPqpLxx? 
amount=0.00016164","currency_code":"BTC","qr_code":"iVBORw0KGgoAAAANSUhEUgAAALQA 
AAC0AQMAAAAHA5RxAAAABlBMVEX/// 
8AAABVwtN+AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABdElEQVRYhe2XSQ4CMQwE/YP+/y/ 
9A+PqDCPm3ogLZpFSGcnE7SVU/e3HNjM9UkszVc0yypvFstE+Ut0mST7NYqn21SzjvDhal/ 
D7De7Fui19ge97VdkVvp/xTHCE/ 
rBHPiQ4tnqI7Q3cwxIcMg7WUok4hrnYc8QQf9XJ8o2Vd6i7sT5Rvsm0hj57Ih7oLB8HCt/ 
OXI4Z5shONo1VeUuf4uWe13ZPd7rzNsTlcluPtL3zI6LchYxvJxeOs3wTy7ojvWh+ly4pTj6hNx9/3X0 
pw11ozlnksf8o32axqlgQtRtIR/nVtnXS63TuJKdZyx1VHpz1njshbtF7rL/n/ 
10uGX4G5YmdD1dZrvfYtCy6R0+Ku7K97dJ2bSe5HZFPvnT5apTlaM5Hp+vdeoX4yVw0GZfH55UgwX3v5 
XhsnSSOcg81DiMmKH7DnCsFN0aP/bnnWpTb8VUfyvNz5a3H3Ixx3nONm6s1Jfn53+S+Xdd/pyj/2w/ 
tBSXE8/g/ 
G19lAAAAAElFTkSuQmCC","amount":0.00016164,"status":"OK","addr":"1JWjsJRMxZgrUHfm 
DDbZSDm1964UPqpLxx"}

II. Handling IPN notifications 
IPN request example (specify callback URL in your mypremium.store API key configuration): 
btc_amount => '0.00016164', 
sbpay_method => 'bitcoin', 
txid => '1778454433', 
status => 'OK', 
currency_code => 'BTC', 
signature => '7a81b75f7ceef4f7829062afb7f64c752d54c03a1354e48234b99639c436fe55', 
ext_order_id => '123456', 
btc_txid => '10b498124215343f10a4fa59b668a6d3b6b02a093cef895be788a62fd15fea2f' 
IPN request parameters: 
sbpay_method: used plugin (always “bitcoin” in the case of cryptocurrencies) 
currency_code: cryptocurrency code 
txid: internal transaction ID 
ext_order_id: passthrough value 
btc_txid: transaction ID in blockchain 
signature: authentity check 
Expected IPN response 
Always “OK” 
III. IPN signature calculation example 
1) Used secret key (take from MyPremium.Store -> API Keys dashboard): 3r4y9ug0mevqhv8h 
2) Sorted keys (without 'signature'): btc_amount, btc_txid, currency_code, ext_order_id, 
sbpay_method, status, txid 
3) Append secret key to concatenated payload (in sorted keys order): 
0.0001616410b498124215343f10a4fa59b668a6d3b6b02a093cef895be788a62fd15fea2fBTC123456 
bitcoinOK17784544333r4y9ug0mevqhv8h 
4) Compute a checksum by applying SHA256 to payload: 
$ php -r 'echo hash("sha256", 
"0.0001616410b498124215343f10a4fa59b668a6d3b6b02a093cef895be788a62fd15fea2fBTC12 
3456bitcoinOK17784544333r4y9ug0mevqhv8h");' 
7a81b75f7ceef4f7829062afb7f64c752d54c03a1354e48234b99639c436fe55

